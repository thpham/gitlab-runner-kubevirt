name: Build and Publish

on:
  push:
    branches: [main]
    tags: ["v*.*.*"]
    paths:
      - "**.go"
      - "go.mod"
      - "go.sum"
      - "flake.nix"
      - "flake.lock"
      - ".github/workflows/build-publish.yml"
  pull_request:
    branches: [main]
    paths:
      - "**.go"
      - "go.mod"
      - "go.sum"
      - "flake.nix"
      - "flake.lock"
      - ".github/workflows/build-publish.yml"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Metadata extraction job
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Extract version and setup tags
        id: meta
        run: |
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "v0.0.0-dev")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Determine tags to create
          TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}"

          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAGS="$TAGS,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          fi

          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION_TAG=${GITHUB_REF#refs/tags/}
            TAGS="$TAGS,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION_TAG}"
          fi

          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "Tags: $TAGS"

  # Build and scan with matrix strategy (parallel execution)
  build-and-scan:
    needs: prepare
    strategy:
      matrix:
        arch:
          - name: amd64
            runner: ubuntu-latest
            nix-system: x86_64-linux
          - name: arm64
            runner: ubuntu-24.04-arm
            nix-system: aarch64-linux
    runs-on: ${{ matrix.arch.runner }}
    permissions:
      contents: read
      security-events: write # For SARIF upload

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Cache Trivy vulnerability database (saves ~30s per run)
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-${{ github.run_id }}
          restore-keys: |
            trivy-db-${{ runner.os }}-

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Setup Nix cache
        uses: cachix/cachix-action@v16
        continue-on-error: true
        with:
          name: gitlab-runner-kubevirt
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          skipPush: ${{ github.event_name == 'pull_request' }}

      - name: Build ${{ matrix.arch.name }} image
        timeout-minutes: 30
        run: |
          echo "üèóÔ∏è  Building ${{ matrix.arch.name }} image (native ${{ matrix.arch.nix-system }})..."
          nix build .#packages.${{ matrix.arch.nix-system }}.container \
            -o result-${{ matrix.arch.name }} \
            --print-build-logs \
            --keep-going
          echo "‚úì ${{ matrix.arch.name }} build complete"
          ls -lh result-${{ matrix.arch.name }}

      # Security scanning (runs in parallel with other architecture)
      - name: Generate SBOM (${{ matrix.arch.name }})
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@0.33.1
        with:
          input: result-${{ matrix.arch.name }}
          format: "cyclonedx"
          output: "sbom-${{ matrix.arch.name }}.json"
          scan-type: "image"

      - name: Vulnerability scan SARIF (${{ matrix.arch.name }})
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@0.33.1
        with:
          input: result-${{ matrix.arch.name }}
          format: "sarif"
          output: "trivy-${{ matrix.arch.name }}.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"
          timeout: "10m"

      - name: Upload SARIF (${{ matrix.arch.name }})
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: "trivy-${{ matrix.arch.name }}.sarif"
          category: "container-scan-${{ matrix.arch.name }}"

      - name: Vulnerability scan table (${{ matrix.arch.name }})
        if: github.event_name != 'pull_request' && matrix.arch.name == 'amd64'
        uses: aquasecurity/trivy-action@0.33.1
        continue-on-error: true
        with:
          input: result-${{ matrix.arch.name }}
          format: "table"
          severity: "CRITICAL,HIGH"
          timeout: "10m"

      # Upload artifacts
      - name: Upload ${{ matrix.arch.name }} image
        uses: actions/upload-artifact@v5
        with:
          name: container-${{ matrix.arch.name }}
          path: result-${{ matrix.arch.name }}
          retention-days: 1

      - name: Upload ${{ matrix.arch.name }} SBOM
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v5
        with:
          name: sbom-${{ matrix.arch.name }}
          path: sbom-${{ matrix.arch.name }}.json
          retention-days: 90

  # Assemble multi-arch manifest and sign
  assemble-and-publish:
    needs: [prepare, build-and-scan]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # needed for signing the images with GitHub OIDC Token

    steps:
      - name: Download AMD64 artifact
        uses: actions/download-artifact@v5
        with:
          name: container-amd64
          path: .

      - name: Download ARM64 artifact
        uses: actions/download-artifact@v5
        with:
          name: container-arm64
          path: .

      - name: Download SBOMs
        if: github.event_name != 'pull_request'
        uses: actions/download-artifact@v5
        with:
          pattern: sbom-*
          path: sboms
          merge-multiple: true

      - name: Verify downloaded artifacts
        run: |
          echo "üì¶ Verifying downloaded artifacts..."
          ls -lh result-*
          file result-amd64 result-arm64

      - name: Setup buildah and container tools
        run: |
          sudo apt-get update
          sudo apt-get install -y buildah skopeo
          # Verify installations
          echo "buildah version: $(buildah --version)"
          echo "skopeo version: $(skopeo --version)"

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        run: |
          buildah login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} ${{ env.REGISTRY }}

      - name: Save current 'latest' tag for rollback
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        continue-on-error: true
        run: |
          echo "üíæ Saving current 'latest' tag for potential rollback..."
          LATEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          CURRENT_LATEST=$(skopeo inspect docker://$LATEST_TAG 2>/dev/null | jq -r '.Digest' || echo "")
          if [ -n "$CURRENT_LATEST" ] && [ "$CURRENT_LATEST" != "null" ]; then
            echo "ROLLBACK_LATEST_DIGEST=$CURRENT_LATEST" >> $GITHUB_ENV
            echo "  Saved latest ‚Üí $CURRENT_LATEST"
          else
            echo "  No existing 'latest' tag to save (first build)"
          fi

      - name: Create and push multi-arch manifest
        if: github.event_name != 'pull_request'
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          VERSION="${{ needs.prepare.outputs.version }}"
          CREATED=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

          # Common OCI annotations for all architectures
          ANNOTATIONS=(
            --annotation "org.opencontainers.image.created=$CREATED"
            --annotation "org.opencontainers.image.authors=thpham"
            --annotation "org.opencontainers.image.url=https://github.com/${{ github.repository }}"
            --annotation "org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md"
            --annotation "org.opencontainers.image.source=https://github.com/${{ github.repository }}"
            --annotation "org.opencontainers.image.version=$VERSION"
            --annotation "org.opencontainers.image.revision=${{ github.sha }}"
            --annotation "org.opencontainers.image.vendor=thpham"
            --annotation "org.opencontainers.image.licenses=MIT"
            --annotation "org.opencontainers.image.title=gitlab-runner-kubevirt"
            --annotation "org.opencontainers.image.description=GitLab Runner executor for KubeVirt VMs"
          )

          echo "üî® Creating multi-arch manifest..."
          buildah manifest create multiarch-manifest

          echo "üì• Loading AMD64 image..."
          AMD64_ID=$(buildah pull docker-archive:result-amd64)
          buildah manifest add --arch amd64 --os linux "${ANNOTATIONS[@]}" \
            multiarch-manifest containers-storage:$AMD64_ID

          echo "üì• Loading ARM64 image..."
          ARM64_ID=$(buildah pull docker-archive:result-arm64)
          buildah manifest add --arch arm64 --os linux "${ANNOTATIONS[@]}" \
            multiarch-manifest containers-storage:$ARM64_ID

          echo "üè∑Ô∏è  Adding OCI annotations to multi-arch manifest..."
          # Annotate the manifest list/index itself (not just individual images)
          ## --index arg is not present in ubuntu image yet.
          for annotation in "${ANNOTATIONS[@]}"; do
            buildah manifest annotate $annotation multiarch-manifest
          done

          echo "‚úì OCI annotations added to manifest and both architectures (timestamp: $CREATED)"

          echo "üöÄ Pushing multi-arch manifest to registry..."
          IFS=',' read -ra TAG_ARRAY <<< "${{ needs.prepare.outputs.tags }}"
          for tag in "${TAG_ARRAY[@]}"; do
            echo "  ‚Üí $tag"
            buildah manifest push --all multiarch-manifest docker://$tag
          done

          echo "‚úì Multi-arch images published successfully"

          # Get the digest from the registry for secure signing
          MANIFEST_DIGEST=$(skopeo inspect docker://$IMAGE:$VERSION | jq -r '.Digest')
          IMAGE_DIGEST="$IMAGE@$MANIFEST_DIGEST"
          echo "IMAGE_DIGEST=$IMAGE_DIGEST" >> $GITHUB_ENV
          echo "üìã Manifest digest for signing: $MANIFEST_DIGEST"

      - name: Verify multi-arch manifest
        if: github.event_name != 'pull_request'
        run: |
          echo "üîç Inspecting multi-arch manifest..."
          buildah manifest inspect multiarch-manifest

          echo ""
          echo "üîç Verifying registry manifest..."
          skopeo inspect docker://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.version }}

      # Image signing and SBOM attestation
      - name: Install Cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v4.0.0

      - name: Log into registry for Cosign
        if: github.event_name != 'pull_request'
        run: |
          cosign login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

      - name: Sign multi-arch manifest
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          # Sign the manifest using digest (immutable reference)
          echo "üîê Signing multi-arch manifest: ${{ env.IMAGE_DIGEST }}"
          cosign sign --yes "${{ env.IMAGE_DIGEST }}"

      - name: Attest SBOMs to image
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          # Create signed SBOM attestations using in-toto format
          echo "üìé Creating signed AMD64 SBOM attestation for ${{ env.IMAGE_DIGEST }}"
          cosign attest --yes \
            --predicate sboms/sbom-amd64.json \
            --type cyclonedx \
            "${{ env.IMAGE_DIGEST }}"

          echo "üìé Creating signed ARM64 SBOM attestation for ${{ env.IMAGE_DIGEST }}"
          cosign attest --yes \
            --predicate sboms/sbom-arm64.json \
            --type cyclonedx \
            "${{ env.IMAGE_DIGEST }}"

      - name: Verify signature and attestations
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          echo "üîç Verifying signature on ${{ env.IMAGE_DIGEST }}"
          cosign verify \
            --certificate-identity-regexp="https://github.com/${{ github.repository }}" \
            --certificate-oidc-issuer="https://token.actions.githubusercontent.com" \
            "${{ env.IMAGE_DIGEST }}"

          echo "‚úì Signature verified successfully"

          echo "üîç Verifying SBOM attestations on ${{ env.IMAGE_DIGEST }}"
          cosign verify-attestation \
            --type cyclonedx \
            --certificate-identity-regexp="https://github.com/${{ github.repository }}" \
            --certificate-oidc-issuer="https://token.actions.githubusercontent.com" \
            "${{ env.IMAGE_DIGEST }}"

          echo "‚úì Attestations verified successfully"

      - name: Rollback on signing failure
        if: github.event_name != 'pull_request' && failure()
        continue-on-error: true
        run: |
          echo "‚ö†Ô∏è  Signing/verification failed - rolling back changes"

          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"

          # Restore 'latest' tag to previous good image (if we saved one)
          if [ -n "${{ env.ROLLBACK_LATEST_DIGEST }}" ]; then
            echo "  Restoring 'latest' tag to previous digest..."
            skopeo copy docker://$IMAGE@${{ env.ROLLBACK_LATEST_DIGEST }} docker://$IMAGE:latest
            echo "  ‚úì Restored latest ‚Üí ${{ env.ROLLBACK_LATEST_DIGEST }}"
          fi

          # Delete immutable tags (version, commit hash) that shouldn't exist for failed builds
          IFS=',' read -ra TAG_ARRAY <<< "${{ needs.prepare.outputs.tags }}"
          for tag in "${TAG_ARRAY[@]}"; do
            # Skip 'latest' as we already restored it above
            if [[ "$tag" != *":latest" ]]; then
              echo "  Deleting immutable tag: $tag"
              skopeo delete docker://$tag 2>&1 || echo "  (tag may not exist)"
            fi
          done

          echo "‚ÑπÔ∏è  Failed image digest remains in registry for debugging"

      - name: Upload SBOM reports
        if: github.event_name != 'pull_request' && success()
        uses: actions/upload-artifact@v5
        with:
          name: sbom-reports
          path: sboms/*.json
          retention-days: 90
